/*
 * OpenSubtitles API
 *
 * Explore subtitles API here
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@opensubtitles.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using OpenSubtitles.Client;
using OpenSubtitles.Model;

namespace OpenSubtitles.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubtitlesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search for subtitles
        /// </summary>
        /// <remarks>
        /// Find subtitle for a video file. All parameters can be combined following various logics: searching by a specific external id (imdb, tmdb), a file moviehash, or a simple text query.  Implement the logic that best fit your needs, remembering that: - if you can get moviehash from file - send it - if you know the ID, IMDB or TMDB, send this rather than a query, an ID will always be more precise - if you search for TV show episodes, sending the parent ID, episode and season number will give best results - send the filename as query parameter together with the moviehash for better results. If your filenames are generally irrelevant, for example a dynamically generated filename from a streaming service, no need to send it. - you can combine all together (send everything what you have and we will take of rest)   &gt; Avoid http redirection by sending request parameters sorted and without default values, and send all queries in lowercase. Remove leading zeroes in IMDB ID  ### Moviehash  If a moviehash is sent with a request, a \&quot;moviehash_match\&quot; boolean field will be added to the response.  The matching subtitles will always come first in the response.   ### Ordering You can order the results using the *order_by* parameter. Ordering is possible on the following fields: _ language, download_count, new_download_count, hearing_impaired, hd, format, fps, votes, points, ratings, from_trusted, foreign_parts_only, ai_translated, machine_translated, upload_date, release, comments _  Change the order direction with *order_direction* (asc/desc)  
        /// </remarks>
        /// <exception cref="OpenSubtitles.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the movie or episode (optional)</param>
        /// <param name="imdbId">IMDB ID of the movie or episode (optional)</param>
        /// <param name="tmdbId">TMDB ID of the movie or episode (optional)</param>
        /// <param name="type">movie, episode or all, (default: all)  (optional)</param>
        /// <param name="query">file name or text search (optional)</param>
        /// <param name="languages">Language code(s), coma separated (en,fr) (optional)</param>
        /// <param name="moviehash">Moviehash of the movie (optional)</param>
        /// <param name="userId">To be used alone - for user uploads listing (optional)</param>
        /// <param name="hearingImpaired">include, exclude, only. (default: include) (optional)</param>
        /// <param name="foreignPartsOnly">exclude, include, only (default: include) (optional)</param>
        /// <param name="trustedSources">include, only (default: include) (optional)</param>
        /// <param name="machineTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="aiTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="orderBy">Order of the returned results, accept any of above fields (optional)</param>
        /// <param name="orderDirection">Order direction of the returned results (asc,desc) (optional)</param>
        /// <param name="parentFeatureId">For Tvshows (optional)</param>
        /// <param name="parentImdbId">For Tvshows (optional)</param>
        /// <param name="parentTmdbId">For Tvshows (optional)</param>
        /// <param name="seasonNumber">For Tvshows  (optional)</param>
        /// <param name="episodeNumber">For Tvshows (optional)</param>
        /// <param name="year">Filter by movie/episode year (optional)</param>
        /// <param name="moviehashMatch">include, only (default: include) (optional)</param>
        /// <param name="page">Results page to display (optional)</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 Subtitles (int? id = default(int?), int? imdbId = default(int?), int? tmdbId = default(int?), string type = default(string), string query = default(string), string languages = default(string), string moviehash = default(string), int? userId = default(int?), string hearingImpaired = default(string), string foreignPartsOnly = default(string), string trustedSources = default(string), string machineTranslated = default(string), string aiTranslated = default(string), string orderBy = default(string), string orderDirection = default(string), int? parentFeatureId = default(int?), int? parentImdbId = default(int?), int? parentTmdbId = default(int?), int? seasonNumber = default(int?), int? episodeNumber = default(int?), int? year = default(int?), string moviehashMatch = default(string), int? page = default(int?));

        /// <summary>
        /// Search for subtitles
        /// </summary>
        /// <remarks>
        /// Find subtitle for a video file. All parameters can be combined following various logics: searching by a specific external id (imdb, tmdb), a file moviehash, or a simple text query.  Implement the logic that best fit your needs, remembering that: - if you can get moviehash from file - send it - if you know the ID, IMDB or TMDB, send this rather than a query, an ID will always be more precise - if you search for TV show episodes, sending the parent ID, episode and season number will give best results - send the filename as query parameter together with the moviehash for better results. If your filenames are generally irrelevant, for example a dynamically generated filename from a streaming service, no need to send it. - you can combine all together (send everything what you have and we will take of rest)   &gt; Avoid http redirection by sending request parameters sorted and without default values, and send all queries in lowercase. Remove leading zeroes in IMDB ID  ### Moviehash  If a moviehash is sent with a request, a \&quot;moviehash_match\&quot; boolean field will be added to the response.  The matching subtitles will always come first in the response.   ### Ordering You can order the results using the *order_by* parameter. Ordering is possible on the following fields: _ language, download_count, new_download_count, hearing_impaired, hd, format, fps, votes, points, ratings, from_trusted, foreign_parts_only, ai_translated, machine_translated, upload_date, release, comments _  Change the order direction with *order_direction* (asc/desc)  
        /// </remarks>
        /// <exception cref="OpenSubtitles.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the movie or episode (optional)</param>
        /// <param name="imdbId">IMDB ID of the movie or episode (optional)</param>
        /// <param name="tmdbId">TMDB ID of the movie or episode (optional)</param>
        /// <param name="type">movie, episode or all, (default: all)  (optional)</param>
        /// <param name="query">file name or text search (optional)</param>
        /// <param name="languages">Language code(s), coma separated (en,fr) (optional)</param>
        /// <param name="moviehash">Moviehash of the movie (optional)</param>
        /// <param name="userId">To be used alone - for user uploads listing (optional)</param>
        /// <param name="hearingImpaired">include, exclude, only. (default: include) (optional)</param>
        /// <param name="foreignPartsOnly">exclude, include, only (default: include) (optional)</param>
        /// <param name="trustedSources">include, only (default: include) (optional)</param>
        /// <param name="machineTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="aiTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="orderBy">Order of the returned results, accept any of above fields (optional)</param>
        /// <param name="orderDirection">Order direction of the returned results (asc,desc) (optional)</param>
        /// <param name="parentFeatureId">For Tvshows (optional)</param>
        /// <param name="parentImdbId">For Tvshows (optional)</param>
        /// <param name="parentTmdbId">For Tvshows (optional)</param>
        /// <param name="seasonNumber">For Tvshows  (optional)</param>
        /// <param name="episodeNumber">For Tvshows (optional)</param>
        /// <param name="year">Filter by movie/episode year (optional)</param>
        /// <param name="moviehashMatch">include, only (default: include) (optional)</param>
        /// <param name="page">Results page to display (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> SubtitlesWithHttpInfo (int? id = default(int?), int? imdbId = default(int?), int? tmdbId = default(int?), string type = default(string), string query = default(string), string languages = default(string), string moviehash = default(string), int? userId = default(int?), string hearingImpaired = default(string), string foreignPartsOnly = default(string), string trustedSources = default(string), string machineTranslated = default(string), string aiTranslated = default(string), string orderBy = default(string), string orderDirection = default(string), int? parentFeatureId = default(int?), int? parentImdbId = default(int?), int? parentTmdbId = default(int?), int? seasonNumber = default(int?), int? episodeNumber = default(int?), int? year = default(int?), string moviehashMatch = default(string), int? page = default(int?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Search for subtitles
        /// </summary>
        /// <remarks>
        /// Find subtitle for a video file. All parameters can be combined following various logics: searching by a specific external id (imdb, tmdb), a file moviehash, or a simple text query.  Implement the logic that best fit your needs, remembering that: - if you can get moviehash from file - send it - if you know the ID, IMDB or TMDB, send this rather than a query, an ID will always be more precise - if you search for TV show episodes, sending the parent ID, episode and season number will give best results - send the filename as query parameter together with the moviehash for better results. If your filenames are generally irrelevant, for example a dynamically generated filename from a streaming service, no need to send it. - you can combine all together (send everything what you have and we will take of rest)   &gt; Avoid http redirection by sending request parameters sorted and without default values, and send all queries in lowercase. Remove leading zeroes in IMDB ID  ### Moviehash  If a moviehash is sent with a request, a \&quot;moviehash_match\&quot; boolean field will be added to the response.  The matching subtitles will always come first in the response.   ### Ordering You can order the results using the *order_by* parameter. Ordering is possible on the following fields: _ language, download_count, new_download_count, hearing_impaired, hd, format, fps, votes, points, ratings, from_trusted, foreign_parts_only, ai_translated, machine_translated, upload_date, release, comments _  Change the order direction with *order_direction* (asc/desc)  
        /// </remarks>
        /// <exception cref="OpenSubtitles.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the movie or episode (optional)</param>
        /// <param name="imdbId">IMDB ID of the movie or episode (optional)</param>
        /// <param name="tmdbId">TMDB ID of the movie or episode (optional)</param>
        /// <param name="type">movie, episode or all, (default: all)  (optional)</param>
        /// <param name="query">file name or text search (optional)</param>
        /// <param name="languages">Language code(s), coma separated (en,fr) (optional)</param>
        /// <param name="moviehash">Moviehash of the movie (optional)</param>
        /// <param name="userId">To be used alone - for user uploads listing (optional)</param>
        /// <param name="hearingImpaired">include, exclude, only. (default: include) (optional)</param>
        /// <param name="foreignPartsOnly">exclude, include, only (default: include) (optional)</param>
        /// <param name="trustedSources">include, only (default: include) (optional)</param>
        /// <param name="machineTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="aiTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="orderBy">Order of the returned results, accept any of above fields (optional)</param>
        /// <param name="orderDirection">Order direction of the returned results (asc,desc) (optional)</param>
        /// <param name="parentFeatureId">For Tvshows (optional)</param>
        /// <param name="parentImdbId">For Tvshows (optional)</param>
        /// <param name="parentTmdbId">For Tvshows (optional)</param>
        /// <param name="seasonNumber">For Tvshows  (optional)</param>
        /// <param name="episodeNumber">For Tvshows (optional)</param>
        /// <param name="year">Filter by movie/episode year (optional)</param>
        /// <param name="moviehashMatch">include, only (default: include) (optional)</param>
        /// <param name="page">Results page to display (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> SubtitlesAsync (int? id = default(int?), int? imdbId = default(int?), int? tmdbId = default(int?), string type = default(string), string query = default(string), string languages = default(string), string moviehash = default(string), int? userId = default(int?), string hearingImpaired = default(string), string foreignPartsOnly = default(string), string trustedSources = default(string), string machineTranslated = default(string), string aiTranslated = default(string), string orderBy = default(string), string orderDirection = default(string), int? parentFeatureId = default(int?), int? parentImdbId = default(int?), int? parentTmdbId = default(int?), int? seasonNumber = default(int?), int? episodeNumber = default(int?), int? year = default(int?), string moviehashMatch = default(string), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search for subtitles
        /// </summary>
        /// <remarks>
        /// Find subtitle for a video file. All parameters can be combined following various logics: searching by a specific external id (imdb, tmdb), a file moviehash, or a simple text query.  Implement the logic that best fit your needs, remembering that: - if you can get moviehash from file - send it - if you know the ID, IMDB or TMDB, send this rather than a query, an ID will always be more precise - if you search for TV show episodes, sending the parent ID, episode and season number will give best results - send the filename as query parameter together with the moviehash for better results. If your filenames are generally irrelevant, for example a dynamically generated filename from a streaming service, no need to send it. - you can combine all together (send everything what you have and we will take of rest)   &gt; Avoid http redirection by sending request parameters sorted and without default values, and send all queries in lowercase. Remove leading zeroes in IMDB ID  ### Moviehash  If a moviehash is sent with a request, a \&quot;moviehash_match\&quot; boolean field will be added to the response.  The matching subtitles will always come first in the response.   ### Ordering You can order the results using the *order_by* parameter. Ordering is possible on the following fields: _ language, download_count, new_download_count, hearing_impaired, hd, format, fps, votes, points, ratings, from_trusted, foreign_parts_only, ai_translated, machine_translated, upload_date, release, comments _  Change the order direction with *order_direction* (asc/desc)  
        /// </remarks>
        /// <exception cref="OpenSubtitles.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the movie or episode (optional)</param>
        /// <param name="imdbId">IMDB ID of the movie or episode (optional)</param>
        /// <param name="tmdbId">TMDB ID of the movie or episode (optional)</param>
        /// <param name="type">movie, episode or all, (default: all)  (optional)</param>
        /// <param name="query">file name or text search (optional)</param>
        /// <param name="languages">Language code(s), coma separated (en,fr) (optional)</param>
        /// <param name="moviehash">Moviehash of the movie (optional)</param>
        /// <param name="userId">To be used alone - for user uploads listing (optional)</param>
        /// <param name="hearingImpaired">include, exclude, only. (default: include) (optional)</param>
        /// <param name="foreignPartsOnly">exclude, include, only (default: include) (optional)</param>
        /// <param name="trustedSources">include, only (default: include) (optional)</param>
        /// <param name="machineTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="aiTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="orderBy">Order of the returned results, accept any of above fields (optional)</param>
        /// <param name="orderDirection">Order direction of the returned results (asc,desc) (optional)</param>
        /// <param name="parentFeatureId">For Tvshows (optional)</param>
        /// <param name="parentImdbId">For Tvshows (optional)</param>
        /// <param name="parentTmdbId">For Tvshows (optional)</param>
        /// <param name="seasonNumber">For Tvshows  (optional)</param>
        /// <param name="episodeNumber">For Tvshows (optional)</param>
        /// <param name="year">Filter by movie/episode year (optional)</param>
        /// <param name="moviehashMatch">include, only (default: include) (optional)</param>
        /// <param name="page">Results page to display (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> SubtitlesWithHttpInfoAsync (int? id = default(int?), int? imdbId = default(int?), int? tmdbId = default(int?), string type = default(string), string query = default(string), string languages = default(string), string moviehash = default(string), int? userId = default(int?), string hearingImpaired = default(string), string foreignPartsOnly = default(string), string trustedSources = default(string), string machineTranslated = default(string), string aiTranslated = default(string), string orderBy = default(string), string orderDirection = default(string), int? parentFeatureId = default(int?), int? parentImdbId = default(int?), int? parentTmdbId = default(int?), int? seasonNumber = default(int?), int? episodeNumber = default(int?), int? year = default(int?), string moviehashMatch = default(string), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubtitlesApi : ISubtitlesApi
    {
        private OpenSubtitles.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitlesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubtitlesApi(String basePath)
        {
            this.Configuration = new OpenSubtitles.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenSubtitles.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitlesApi"/> class
        /// </summary>
        /// <returns></returns>
        public SubtitlesApi()
        {
            this.Configuration = OpenSubtitles.Client.Configuration.Default;

            ExceptionFactory = OpenSubtitles.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitlesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubtitlesApi(OpenSubtitles.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenSubtitles.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenSubtitles.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenSubtitles.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenSubtitles.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Search for subtitles Find subtitle for a video file. All parameters can be combined following various logics: searching by a specific external id (imdb, tmdb), a file moviehash, or a simple text query.  Implement the logic that best fit your needs, remembering that: - if you can get moviehash from file - send it - if you know the ID, IMDB or TMDB, send this rather than a query, an ID will always be more precise - if you search for TV show episodes, sending the parent ID, episode and season number will give best results - send the filename as query parameter together with the moviehash for better results. If your filenames are generally irrelevant, for example a dynamically generated filename from a streaming service, no need to send it. - you can combine all together (send everything what you have and we will take of rest)   &gt; Avoid http redirection by sending request parameters sorted and without default values, and send all queries in lowercase. Remove leading zeroes in IMDB ID  ### Moviehash  If a moviehash is sent with a request, a \&quot;moviehash_match\&quot; boolean field will be added to the response.  The matching subtitles will always come first in the response.   ### Ordering You can order the results using the *order_by* parameter. Ordering is possible on the following fields: _ language, download_count, new_download_count, hearing_impaired, hd, format, fps, votes, points, ratings, from_trusted, foreign_parts_only, ai_translated, machine_translated, upload_date, release, comments _  Change the order direction with *order_direction* (asc/desc)  
        /// </summary>
        /// <exception cref="OpenSubtitles.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the movie or episode (optional)</param>
        /// <param name="imdbId">IMDB ID of the movie or episode (optional)</param>
        /// <param name="tmdbId">TMDB ID of the movie or episode (optional)</param>
        /// <param name="type">movie, episode or all, (default: all)  (optional)</param>
        /// <param name="query">file name or text search (optional)</param>
        /// <param name="languages">Language code(s), coma separated (en,fr) (optional)</param>
        /// <param name="moviehash">Moviehash of the movie (optional)</param>
        /// <param name="userId">To be used alone - for user uploads listing (optional)</param>
        /// <param name="hearingImpaired">include, exclude, only. (default: include) (optional)</param>
        /// <param name="foreignPartsOnly">exclude, include, only (default: include) (optional)</param>
        /// <param name="trustedSources">include, only (default: include) (optional)</param>
        /// <param name="machineTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="aiTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="orderBy">Order of the returned results, accept any of above fields (optional)</param>
        /// <param name="orderDirection">Order direction of the returned results (asc,desc) (optional)</param>
        /// <param name="parentFeatureId">For Tvshows (optional)</param>
        /// <param name="parentImdbId">For Tvshows (optional)</param>
        /// <param name="parentTmdbId">For Tvshows (optional)</param>
        /// <param name="seasonNumber">For Tvshows  (optional)</param>
        /// <param name="episodeNumber">For Tvshows (optional)</param>
        /// <param name="year">Filter by movie/episode year (optional)</param>
        /// <param name="moviehashMatch">include, only (default: include) (optional)</param>
        /// <param name="page">Results page to display (optional)</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 Subtitles (int? id = default(int?), int? imdbId = default(int?), int? tmdbId = default(int?), string type = default(string), string query = default(string), string languages = default(string), string moviehash = default(string), int? userId = default(int?), string hearingImpaired = default(string), string foreignPartsOnly = default(string), string trustedSources = default(string), string machineTranslated = default(string), string aiTranslated = default(string), string orderBy = default(string), string orderDirection = default(string), int? parentFeatureId = default(int?), int? parentImdbId = default(int?), int? parentTmdbId = default(int?), int? seasonNumber = default(int?), int? episodeNumber = default(int?), int? year = default(int?), string moviehashMatch = default(string), int? page = default(int?))
        {
             ApiResponse<InlineResponse2007> localVarResponse = SubtitlesWithHttpInfo(id, imdbId, tmdbId, type, query, languages, moviehash, userId, hearingImpaired, foreignPartsOnly, trustedSources, machineTranslated, aiTranslated, orderBy, orderDirection, parentFeatureId, parentImdbId, parentTmdbId, seasonNumber, episodeNumber, year, moviehashMatch, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for subtitles Find subtitle for a video file. All parameters can be combined following various logics: searching by a specific external id (imdb, tmdb), a file moviehash, or a simple text query.  Implement the logic that best fit your needs, remembering that: - if you can get moviehash from file - send it - if you know the ID, IMDB or TMDB, send this rather than a query, an ID will always be more precise - if you search for TV show episodes, sending the parent ID, episode and season number will give best results - send the filename as query parameter together with the moviehash for better results. If your filenames are generally irrelevant, for example a dynamically generated filename from a streaming service, no need to send it. - you can combine all together (send everything what you have and we will take of rest)   &gt; Avoid http redirection by sending request parameters sorted and without default values, and send all queries in lowercase. Remove leading zeroes in IMDB ID  ### Moviehash  If a moviehash is sent with a request, a \&quot;moviehash_match\&quot; boolean field will be added to the response.  The matching subtitles will always come first in the response.   ### Ordering You can order the results using the *order_by* parameter. Ordering is possible on the following fields: _ language, download_count, new_download_count, hearing_impaired, hd, format, fps, votes, points, ratings, from_trusted, foreign_parts_only, ai_translated, machine_translated, upload_date, release, comments _  Change the order direction with *order_direction* (asc/desc)  
        /// </summary>
        /// <exception cref="OpenSubtitles.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the movie or episode (optional)</param>
        /// <param name="imdbId">IMDB ID of the movie or episode (optional)</param>
        /// <param name="tmdbId">TMDB ID of the movie or episode (optional)</param>
        /// <param name="type">movie, episode or all, (default: all)  (optional)</param>
        /// <param name="query">file name or text search (optional)</param>
        /// <param name="languages">Language code(s), coma separated (en,fr) (optional)</param>
        /// <param name="moviehash">Moviehash of the movie (optional)</param>
        /// <param name="userId">To be used alone - for user uploads listing (optional)</param>
        /// <param name="hearingImpaired">include, exclude, only. (default: include) (optional)</param>
        /// <param name="foreignPartsOnly">exclude, include, only (default: include) (optional)</param>
        /// <param name="trustedSources">include, only (default: include) (optional)</param>
        /// <param name="machineTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="aiTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="orderBy">Order of the returned results, accept any of above fields (optional)</param>
        /// <param name="orderDirection">Order direction of the returned results (asc,desc) (optional)</param>
        /// <param name="parentFeatureId">For Tvshows (optional)</param>
        /// <param name="parentImdbId">For Tvshows (optional)</param>
        /// <param name="parentTmdbId">For Tvshows (optional)</param>
        /// <param name="seasonNumber">For Tvshows  (optional)</param>
        /// <param name="episodeNumber">For Tvshows (optional)</param>
        /// <param name="year">Filter by movie/episode year (optional)</param>
        /// <param name="moviehashMatch">include, only (default: include) (optional)</param>
        /// <param name="page">Results page to display (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse<InlineResponse2007> SubtitlesWithHttpInfo (int? id = default(int?), int? imdbId = default(int?), int? tmdbId = default(int?), string type = default(string), string query = default(string), string languages = default(string), string moviehash = default(string), int? userId = default(int?), string hearingImpaired = default(string), string foreignPartsOnly = default(string), string trustedSources = default(string), string machineTranslated = default(string), string aiTranslated = default(string), string orderBy = default(string), string orderDirection = default(string), int? parentFeatureId = default(int?), int? parentImdbId = default(int?), int? parentTmdbId = default(int?), int? seasonNumber = default(int?), int? episodeNumber = default(int?), int? year = default(int?), string moviehashMatch = default(string), int? page = default(int?))
        {

            var localVarPath = "/subtitles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (imdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imdb_id", imdbId)); // query parameter
            if (tmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tmdb_id", tmdbId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (moviehash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "moviehash", moviehash)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (hearingImpaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hearing_impaired", hearingImpaired)); // query parameter
            if (foreignPartsOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foreign_parts_only", foreignPartsOnly)); // query parameter
            if (trustedSources != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trusted_sources", trustedSources)); // query parameter
            if (machineTranslated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "machine_translated", machineTranslated)); // query parameter
            if (aiTranslated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ai_translated", aiTranslated)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (parentFeatureId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_feature_id", parentFeatureId)); // query parameter
            if (parentImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_imdb_id", parentImdbId)); // query parameter
            if (parentTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_tmdb_id", parentTmdbId)); // query parameter
            if (seasonNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "season_number", seasonNumber)); // query parameter
            if (episodeNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "episode_number", episodeNumber)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (moviehashMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "moviehash_match", moviehashMatch)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (Api-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Key")))
            {
                localVarHeaderParams["Api-Key"] = this.Configuration.GetApiKeyWithPrefix("Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Subtitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Search for subtitles Find subtitle for a video file. All parameters can be combined following various logics: searching by a specific external id (imdb, tmdb), a file moviehash, or a simple text query.  Implement the logic that best fit your needs, remembering that: - if you can get moviehash from file - send it - if you know the ID, IMDB or TMDB, send this rather than a query, an ID will always be more precise - if you search for TV show episodes, sending the parent ID, episode and season number will give best results - send the filename as query parameter together with the moviehash for better results. If your filenames are generally irrelevant, for example a dynamically generated filename from a streaming service, no need to send it. - you can combine all together (send everything what you have and we will take of rest)   &gt; Avoid http redirection by sending request parameters sorted and without default values, and send all queries in lowercase. Remove leading zeroes in IMDB ID  ### Moviehash  If a moviehash is sent with a request, a \&quot;moviehash_match\&quot; boolean field will be added to the response.  The matching subtitles will always come first in the response.   ### Ordering You can order the results using the *order_by* parameter. Ordering is possible on the following fields: _ language, download_count, new_download_count, hearing_impaired, hd, format, fps, votes, points, ratings, from_trusted, foreign_parts_only, ai_translated, machine_translated, upload_date, release, comments _  Change the order direction with *order_direction* (asc/desc)  
        /// </summary>
        /// <exception cref="OpenSubtitles.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the movie or episode (optional)</param>
        /// <param name="imdbId">IMDB ID of the movie or episode (optional)</param>
        /// <param name="tmdbId">TMDB ID of the movie or episode (optional)</param>
        /// <param name="type">movie, episode or all, (default: all)  (optional)</param>
        /// <param name="query">file name or text search (optional)</param>
        /// <param name="languages">Language code(s), coma separated (en,fr) (optional)</param>
        /// <param name="moviehash">Moviehash of the movie (optional)</param>
        /// <param name="userId">To be used alone - for user uploads listing (optional)</param>
        /// <param name="hearingImpaired">include, exclude, only. (default: include) (optional)</param>
        /// <param name="foreignPartsOnly">exclude, include, only (default: include) (optional)</param>
        /// <param name="trustedSources">include, only (default: include) (optional)</param>
        /// <param name="machineTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="aiTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="orderBy">Order of the returned results, accept any of above fields (optional)</param>
        /// <param name="orderDirection">Order direction of the returned results (asc,desc) (optional)</param>
        /// <param name="parentFeatureId">For Tvshows (optional)</param>
        /// <param name="parentImdbId">For Tvshows (optional)</param>
        /// <param name="parentTmdbId">For Tvshows (optional)</param>
        /// <param name="seasonNumber">For Tvshows  (optional)</param>
        /// <param name="episodeNumber">For Tvshows (optional)</param>
        /// <param name="year">Filter by movie/episode year (optional)</param>
        /// <param name="moviehashMatch">include, only (default: include) (optional)</param>
        /// <param name="page">Results page to display (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> SubtitlesAsync (int? id = default(int?), int? imdbId = default(int?), int? tmdbId = default(int?), string type = default(string), string query = default(string), string languages = default(string), string moviehash = default(string), int? userId = default(int?), string hearingImpaired = default(string), string foreignPartsOnly = default(string), string trustedSources = default(string), string machineTranslated = default(string), string aiTranslated = default(string), string orderBy = default(string), string orderDirection = default(string), int? parentFeatureId = default(int?), int? parentImdbId = default(int?), int? parentTmdbId = default(int?), int? seasonNumber = default(int?), int? episodeNumber = default(int?), int? year = default(int?), string moviehashMatch = default(string), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse2007> localVarResponse = await SubtitlesWithHttpInfoAsync(id, imdbId, tmdbId, type, query, languages, moviehash, userId, hearingImpaired, foreignPartsOnly, trustedSources, machineTranslated, aiTranslated, orderBy, orderDirection, parentFeatureId, parentImdbId, parentTmdbId, seasonNumber, episodeNumber, year, moviehashMatch, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for subtitles Find subtitle for a video file. All parameters can be combined following various logics: searching by a specific external id (imdb, tmdb), a file moviehash, or a simple text query.  Implement the logic that best fit your needs, remembering that: - if you can get moviehash from file - send it - if you know the ID, IMDB or TMDB, send this rather than a query, an ID will always be more precise - if you search for TV show episodes, sending the parent ID, episode and season number will give best results - send the filename as query parameter together with the moviehash for better results. If your filenames are generally irrelevant, for example a dynamically generated filename from a streaming service, no need to send it. - you can combine all together (send everything what you have and we will take of rest)   &gt; Avoid http redirection by sending request parameters sorted and without default values, and send all queries in lowercase. Remove leading zeroes in IMDB ID  ### Moviehash  If a moviehash is sent with a request, a \&quot;moviehash_match\&quot; boolean field will be added to the response.  The matching subtitles will always come first in the response.   ### Ordering You can order the results using the *order_by* parameter. Ordering is possible on the following fields: _ language, download_count, new_download_count, hearing_impaired, hd, format, fps, votes, points, ratings, from_trusted, foreign_parts_only, ai_translated, machine_translated, upload_date, release, comments _  Change the order direction with *order_direction* (asc/desc)  
        /// </summary>
        /// <exception cref="OpenSubtitles.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the movie or episode (optional)</param>
        /// <param name="imdbId">IMDB ID of the movie or episode (optional)</param>
        /// <param name="tmdbId">TMDB ID of the movie or episode (optional)</param>
        /// <param name="type">movie, episode or all, (default: all)  (optional)</param>
        /// <param name="query">file name or text search (optional)</param>
        /// <param name="languages">Language code(s), coma separated (en,fr) (optional)</param>
        /// <param name="moviehash">Moviehash of the movie (optional)</param>
        /// <param name="userId">To be used alone - for user uploads listing (optional)</param>
        /// <param name="hearingImpaired">include, exclude, only. (default: include) (optional)</param>
        /// <param name="foreignPartsOnly">exclude, include, only (default: include) (optional)</param>
        /// <param name="trustedSources">include, only (default: include) (optional)</param>
        /// <param name="machineTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="aiTranslated">exclude, include  (default: exclude) (optional)</param>
        /// <param name="orderBy">Order of the returned results, accept any of above fields (optional)</param>
        /// <param name="orderDirection">Order direction of the returned results (asc,desc) (optional)</param>
        /// <param name="parentFeatureId">For Tvshows (optional)</param>
        /// <param name="parentImdbId">For Tvshows (optional)</param>
        /// <param name="parentTmdbId">For Tvshows (optional)</param>
        /// <param name="seasonNumber">For Tvshows  (optional)</param>
        /// <param name="episodeNumber">For Tvshows (optional)</param>
        /// <param name="year">Filter by movie/episode year (optional)</param>
        /// <param name="moviehashMatch">include, only (default: include) (optional)</param>
        /// <param name="page">Results page to display (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> SubtitlesWithHttpInfoAsync (int? id = default(int?), int? imdbId = default(int?), int? tmdbId = default(int?), string type = default(string), string query = default(string), string languages = default(string), string moviehash = default(string), int? userId = default(int?), string hearingImpaired = default(string), string foreignPartsOnly = default(string), string trustedSources = default(string), string machineTranslated = default(string), string aiTranslated = default(string), string orderBy = default(string), string orderDirection = default(string), int? parentFeatureId = default(int?), int? parentImdbId = default(int?), int? parentTmdbId = default(int?), int? seasonNumber = default(int?), int? episodeNumber = default(int?), int? year = default(int?), string moviehashMatch = default(string), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/subtitles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (imdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imdb_id", imdbId)); // query parameter
            if (tmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tmdb_id", tmdbId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (moviehash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "moviehash", moviehash)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (hearingImpaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hearing_impaired", hearingImpaired)); // query parameter
            if (foreignPartsOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foreign_parts_only", foreignPartsOnly)); // query parameter
            if (trustedSources != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trusted_sources", trustedSources)); // query parameter
            if (machineTranslated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "machine_translated", machineTranslated)); // query parameter
            if (aiTranslated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ai_translated", aiTranslated)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (parentFeatureId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_feature_id", parentFeatureId)); // query parameter
            if (parentImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_imdb_id", parentImdbId)); // query parameter
            if (parentTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_tmdb_id", parentTmdbId)); // query parameter
            if (seasonNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "season_number", seasonNumber)); // query parameter
            if (episodeNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "episode_number", episodeNumber)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (moviehashMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "moviehash_match", moviehashMatch)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (Api-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Key")))
            {
                localVarHeaderParams["Api-Key"] = this.Configuration.GetApiKeyWithPrefix("Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Subtitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

    }
}
