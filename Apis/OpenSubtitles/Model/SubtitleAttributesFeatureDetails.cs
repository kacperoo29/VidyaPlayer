/*
 * OpenSubtitles API
 *
 * Explore subtitles API here
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@opensubtitles.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenSubtitles.Client.OpenAPIDateConverter;

namespace OpenSubtitles.Model
{
    /// <summary>
    /// SubtitleAttributesFeatureDetails
    /// </summary>
    [DataContract]
    public partial class SubtitleAttributesFeatureDetails :  IEquatable<SubtitleAttributesFeatureDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitleAttributesFeatureDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubtitleAttributesFeatureDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitleAttributesFeatureDetails" /> class.
        /// </summary>
        /// <param name="featureId">featureId (required).</param>
        /// <param name="featureType">featureType (required).</param>
        /// <param name="year">year (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="movieName">movieName (required).</param>
        /// <param name="imdbId">imdbId (required).</param>
        /// <param name="tmdbId">tmdbId (required).</param>
        public SubtitleAttributesFeatureDetails(decimal featureId = default(decimal), string featureType = default(string), decimal year = default(decimal), string title = default(string), string movieName = default(string), decimal imdbId = default(decimal), decimal tmdbId = default(decimal))
        {
            // to ensure "featureId" is required (not null)
            if (featureId == null)
            {
                throw new InvalidDataException("featureId is a required property for SubtitleAttributesFeatureDetails and cannot be null");
            }
            else
            {
                this.FeatureId = featureId;
            }

            // to ensure "featureType" is required (not null)
            if (featureType == null)
            {
                throw new InvalidDataException("featureType is a required property for SubtitleAttributesFeatureDetails and cannot be null");
            }
            else
            {
                this.FeatureType = featureType;
            }

            // to ensure "year" is required (not null)
            if (year == null)
            {
                throw new InvalidDataException("year is a required property for SubtitleAttributesFeatureDetails and cannot be null");
            }
            else
            {
                this.Year = year;
            }

            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for SubtitleAttributesFeatureDetails and cannot be null");
            }
            else
            {
                this.Title = title;
            }

            // to ensure "movieName" is required (not null)
            if (movieName == null)
            {
                throw new InvalidDataException("movieName is a required property for SubtitleAttributesFeatureDetails and cannot be null");
            }
            else
            {
                this.MovieName = movieName;
            }

            // to ensure "imdbId" is required (not null)
            if (imdbId == null)
            {
                throw new InvalidDataException("imdbId is a required property for SubtitleAttributesFeatureDetails and cannot be null");
            }
            else
            {
                this.ImdbId = imdbId;
            }

            // to ensure "tmdbId" is required (not null)
            if (tmdbId == null)
            {
                throw new InvalidDataException("tmdbId is a required property for SubtitleAttributesFeatureDetails and cannot be null");
            }
            else
            {
                this.TmdbId = tmdbId;
            }

        }

        /// <summary>
        /// Gets or Sets FeatureId
        /// </summary>
        [DataMember(Name="feature_id", EmitDefaultValue=true)]
        public decimal FeatureId { get; set; }

        /// <summary>
        /// Gets or Sets FeatureType
        /// </summary>
        [DataMember(Name="feature_type", EmitDefaultValue=true)]
        public string FeatureType { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=true)]
        public decimal Year { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets MovieName
        /// </summary>
        [DataMember(Name="movie_name", EmitDefaultValue=true)]
        public string MovieName { get; set; }

        /// <summary>
        /// Gets or Sets ImdbId
        /// </summary>
        [DataMember(Name="imdb_id", EmitDefaultValue=true)]
        public decimal? ImdbId { get; set; }

        /// <summary>
        /// Gets or Sets TmdbId
        /// </summary>
        [DataMember(Name="tmdb_id", EmitDefaultValue=true)]
        public decimal? TmdbId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubtitleAttributesFeatureDetails {\n");
            sb.Append("  FeatureId: ").Append(FeatureId).Append("\n");
            sb.Append("  FeatureType: ").Append(FeatureType).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  MovieName: ").Append(MovieName).Append("\n");
            sb.Append("  ImdbId: ").Append(ImdbId).Append("\n");
            sb.Append("  TmdbId: ").Append(TmdbId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubtitleAttributesFeatureDetails);
        }

        /// <summary>
        /// Returns true if SubtitleAttributesFeatureDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SubtitleAttributesFeatureDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubtitleAttributesFeatureDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeatureId == input.FeatureId ||
                    (this.FeatureId != null &&
                    this.FeatureId.Equals(input.FeatureId))
                ) && 
                (
                    this.FeatureType == input.FeatureType ||
                    (this.FeatureType != null &&
                    this.FeatureType.Equals(input.FeatureType))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.MovieName == input.MovieName ||
                    (this.MovieName != null &&
                    this.MovieName.Equals(input.MovieName))
                ) && 
                (
                    this.ImdbId == input.ImdbId ||
                    (this.ImdbId != null &&
                    this.ImdbId.Equals(input.ImdbId))
                ) && 
                (
                    this.TmdbId == input.TmdbId ||
                    (this.TmdbId != null &&
                    this.TmdbId.Equals(input.TmdbId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeatureId != null)
                    hashCode = hashCode * 59 + this.FeatureId.GetHashCode();
                if (this.FeatureType != null)
                    hashCode = hashCode * 59 + this.FeatureType.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.MovieName != null)
                    hashCode = hashCode * 59 + this.MovieName.GetHashCode();
                if (this.ImdbId != null)
                    hashCode = hashCode * 59 + this.ImdbId.GetHashCode();
                if (this.TmdbId != null)
                    hashCode = hashCode * 59 + this.TmdbId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // FeatureType (string) minLength
            if(this.FeatureType != null && this.FeatureType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FeatureType, length must be greater than 1.", new [] { "FeatureType" });
            }


            // Title (string) minLength
            if(this.Title != null && this.Title.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }


            // MovieName (string) minLength
            if(this.MovieName != null && this.MovieName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MovieName, length must be greater than 1.", new [] { "MovieName" });
            }

            yield break;
        }
    }

}
