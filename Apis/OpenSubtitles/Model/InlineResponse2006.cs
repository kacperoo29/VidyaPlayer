/*
 * OpenSubtitles API
 *
 * Explore subtitles API here
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@opensubtitles.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenSubtitles.Client.OpenAPIDateConverter;

namespace OpenSubtitles.Model
{
    /// <summary>
    /// InlineResponse2006
    /// </summary>
    [DataContract]
    public partial class InlineResponse2006 :  IEquatable<InlineResponse2006>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006" /> class.
        /// </summary>
        /// <param name="movie">movie.</param>
        /// <param name="episode">episode.</param>
        /// <param name="tv">tv.</param>
        public InlineResponse2006(FeatureMovie movie = default(FeatureMovie), FeatureEpisode episode = default(FeatureEpisode), FeatureTvshow tv = default(FeatureTvshow))
        {
            this.Movie = movie;
            this.Episode = episode;
            this.Tv = tv;
        }

        /// <summary>
        /// Gets or Sets Movie
        /// </summary>
        [DataMember(Name="movie", EmitDefaultValue=false)]
        public FeatureMovie Movie { get; set; }

        /// <summary>
        /// Gets or Sets Episode
        /// </summary>
        [DataMember(Name="episode", EmitDefaultValue=false)]
        public FeatureEpisode Episode { get; set; }

        /// <summary>
        /// Gets or Sets Tv
        /// </summary>
        [DataMember(Name="tv", EmitDefaultValue=false)]
        public FeatureTvshow Tv { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006 {\n");
            sb.Append("  Movie: ").Append(Movie).Append("\n");
            sb.Append("  Episode: ").Append(Episode).Append("\n");
            sb.Append("  Tv: ").Append(Tv).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006);
        }

        /// <summary>
        /// Returns true if InlineResponse2006 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Movie == input.Movie ||
                    (this.Movie != null &&
                    this.Movie.Equals(input.Movie))
                ) && 
                (
                    this.Episode == input.Episode ||
                    (this.Episode != null &&
                    this.Episode.Equals(input.Episode))
                ) && 
                (
                    this.Tv == input.Tv ||
                    (this.Tv != null &&
                    this.Tv.Equals(input.Tv))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Movie != null)
                    hashCode = hashCode * 59 + this.Movie.GetHashCode();
                if (this.Episode != null)
                    hashCode = hashCode * 59 + this.Episode.GetHashCode();
                if (this.Tv != null)
                    hashCode = hashCode * 59 + this.Tv.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
