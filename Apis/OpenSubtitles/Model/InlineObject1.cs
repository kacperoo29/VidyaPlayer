/*
 * OpenSubtitles API
 *
 * Explore subtitles API here
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@opensubtitles.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenSubtitles.Client.OpenAPIDateConverter;

namespace OpenSubtitles.Model
{
    /// <summary>
    /// InlineObject1
    /// </summary>
    [DataContract]
    public partial class InlineObject1 :  IEquatable<InlineObject1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject1" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject1" /> class.
        /// </summary>
        /// <param name="fileId">file_id from /subtitles search results (required).</param>
        /// <param name="subFormat">from /infos/formats.</param>
        /// <param name="fileName">desired file name.</param>
        /// <param name="inFps">used for conversions, in_fps and out_fps must then be indicated.</param>
        /// <param name="outFps">used for conversions, in_fps and out_fps must then be indicated.</param>
        /// <param name="timeshift">timeshift.</param>
        /// <param name="forceDownload">(1/0) set subtitle file headers to \&quot;application/force-download\&quot;.</param>
        public InlineObject1(int fileId = default(int), string subFormat = default(string), string fileName = default(string), decimal inFps = default(decimal), decimal outFps = default(decimal), decimal timeshift = default(decimal), bool forceDownload = default(bool))
        {
            // to ensure "fileId" is required (not null)
            if (fileId == null)
            {
                throw new InvalidDataException("fileId is a required property for InlineObject1 and cannot be null");
            }
            else
            {
                this.FileId = fileId;
            }

            this.SubFormat = subFormat;
            this.FileName = fileName;
            this.InFps = inFps;
            this.OutFps = outFps;
            this.Timeshift = timeshift;
            this.ForceDownload = forceDownload;
        }

        /// <summary>
        /// file_id from /subtitles search results
        /// </summary>
        /// <value>file_id from /subtitles search results</value>
        [DataMember(Name="file_id", EmitDefaultValue=true)]
        public int FileId { get; set; }

        /// <summary>
        /// from /infos/formats
        /// </summary>
        /// <value>from /infos/formats</value>
        [DataMember(Name="sub_format", EmitDefaultValue=false)]
        public string SubFormat { get; set; }

        /// <summary>
        /// desired file name
        /// </summary>
        /// <value>desired file name</value>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// used for conversions, in_fps and out_fps must then be indicated
        /// </summary>
        /// <value>used for conversions, in_fps and out_fps must then be indicated</value>
        [DataMember(Name="in_fps", EmitDefaultValue=false)]
        public decimal InFps { get; set; }

        /// <summary>
        /// used for conversions, in_fps and out_fps must then be indicated
        /// </summary>
        /// <value>used for conversions, in_fps and out_fps must then be indicated</value>
        [DataMember(Name="out_fps", EmitDefaultValue=false)]
        public decimal OutFps { get; set; }

        /// <summary>
        /// Gets or Sets Timeshift
        /// </summary>
        [DataMember(Name="timeshift", EmitDefaultValue=false)]
        public decimal Timeshift { get; set; }

        /// <summary>
        /// (1/0) set subtitle file headers to \&quot;application/force-download\&quot;
        /// </summary>
        /// <value>(1/0) set subtitle file headers to \&quot;application/force-download\&quot;</value>
        [DataMember(Name="force_download", EmitDefaultValue=false)]
        public bool ForceDownload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject1 {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  SubFormat: ").Append(SubFormat).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  InFps: ").Append(InFps).Append("\n");
            sb.Append("  OutFps: ").Append(OutFps).Append("\n");
            sb.Append("  Timeshift: ").Append(Timeshift).Append("\n");
            sb.Append("  ForceDownload: ").Append(ForceDownload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject1);
        }

        /// <summary>
        /// Returns true if InlineObject1 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.SubFormat == input.SubFormat ||
                    (this.SubFormat != null &&
                    this.SubFormat.Equals(input.SubFormat))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.InFps == input.InFps ||
                    (this.InFps != null &&
                    this.InFps.Equals(input.InFps))
                ) && 
                (
                    this.OutFps == input.OutFps ||
                    (this.OutFps != null &&
                    this.OutFps.Equals(input.OutFps))
                ) && 
                (
                    this.Timeshift == input.Timeshift ||
                    (this.Timeshift != null &&
                    this.Timeshift.Equals(input.Timeshift))
                ) && 
                (
                    this.ForceDownload == input.ForceDownload ||
                    (this.ForceDownload != null &&
                    this.ForceDownload.Equals(input.ForceDownload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileId != null)
                    hashCode = hashCode * 59 + this.FileId.GetHashCode();
                if (this.SubFormat != null)
                    hashCode = hashCode * 59 + this.SubFormat.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.InFps != null)
                    hashCode = hashCode * 59 + this.InFps.GetHashCode();
                if (this.OutFps != null)
                    hashCode = hashCode * 59 + this.OutFps.GetHashCode();
                if (this.Timeshift != null)
                    hashCode = hashCode * 59 + this.Timeshift.GetHashCode();
                if (this.ForceDownload != null)
                    hashCode = hashCode * 59 + this.ForceDownload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
