/*
 * OpenSubtitles API
 *
 * Explore subtitles API here
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@opensubtitles.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenSubtitles.Client.OpenAPIDateConverter;

namespace OpenSubtitles.Model
{
    /// <summary>
    /// InlineResponse2004AttributesUploader
    /// </summary>
    [DataContract]
    public partial class InlineResponse2004AttributesUploader :  IEquatable<InlineResponse2004AttributesUploader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004AttributesUploader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2004AttributesUploader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004AttributesUploader" /> class.
        /// </summary>
        /// <param name="uploaderId">uploaderId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="rank">rank (required).</param>
        public InlineResponse2004AttributesUploader(decimal uploaderId = default(decimal), string name = default(string), string rank = default(string))
        {
            // to ensure "uploaderId" is required (not null)
            if (uploaderId == null)
            {
                throw new InvalidDataException("uploaderId is a required property for InlineResponse2004AttributesUploader and cannot be null");
            }
            else
            {
                this.UploaderId = uploaderId;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for InlineResponse2004AttributesUploader and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "rank" is required (not null)
            if (rank == null)
            {
                throw new InvalidDataException("rank is a required property for InlineResponse2004AttributesUploader and cannot be null");
            }
            else
            {
                this.Rank = rank;
            }

        }

        /// <summary>
        /// Gets or Sets UploaderId
        /// </summary>
        [DataMember(Name="uploader_id", EmitDefaultValue=true)]
        public decimal UploaderId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name="rank", EmitDefaultValue=true)]
        public string Rank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2004AttributesUploader {\n");
            sb.Append("  UploaderId: ").Append(UploaderId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004AttributesUploader);
        }

        /// <summary>
        /// Returns true if InlineResponse2004AttributesUploader instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004AttributesUploader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004AttributesUploader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UploaderId == input.UploaderId ||
                    (this.UploaderId != null &&
                    this.UploaderId.Equals(input.UploaderId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UploaderId != null)
                    hashCode = hashCode * 59 + this.UploaderId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }


            // Rank (string) minLength
            if(this.Rank != null && this.Rank.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rank, length must be greater than 1.", new [] { "Rank" });
            }

            yield break;
        }
    }

}
