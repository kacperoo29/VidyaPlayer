/*
 * OpenSubtitles API
 *
 * Explore subtitles API here
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@opensubtitles.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenSubtitles.Client.OpenAPIDateConverter;

namespace OpenSubtitles.Model
{
    /// <summary>
    /// InlineResponse2002Data
    /// </summary>
    [DataContract]
    public partial class InlineResponse2002Data :  IEquatable<InlineResponse2002Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2002Data" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2002Data() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2002Data" /> class.
        /// </summary>
        /// <param name="languageCode">languageCode (required).</param>
        /// <param name="languageName">languageName (required).</param>
        public InlineResponse2002Data(string languageCode = default(string), string languageName = default(string))
        {
            // to ensure "languageCode" is required (not null)
            if (languageCode == null)
            {
                throw new InvalidDataException("languageCode is a required property for InlineResponse2002Data and cannot be null");
            }
            else
            {
                this.LanguageCode = languageCode;
            }

            // to ensure "languageName" is required (not null)
            if (languageName == null)
            {
                throw new InvalidDataException("languageName is a required property for InlineResponse2002Data and cannot be null");
            }
            else
            {
                this.LanguageName = languageName;
            }

        }

        /// <summary>
        /// Gets or Sets LanguageCode
        /// </summary>
        [DataMember(Name="language_code", EmitDefaultValue=true)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Gets or Sets LanguageName
        /// </summary>
        [DataMember(Name="language_name", EmitDefaultValue=true)]
        public string LanguageName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2002Data {\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  LanguageName: ").Append(LanguageName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2002Data);
        }

        /// <summary>
        /// Returns true if InlineResponse2002Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2002Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2002Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LanguageCode == input.LanguageCode ||
                    (this.LanguageCode != null &&
                    this.LanguageCode.Equals(input.LanguageCode))
                ) && 
                (
                    this.LanguageName == input.LanguageName ||
                    (this.LanguageName != null &&
                    this.LanguageName.Equals(input.LanguageName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LanguageCode != null)
                    hashCode = hashCode * 59 + this.LanguageCode.GetHashCode();
                if (this.LanguageName != null)
                    hashCode = hashCode * 59 + this.LanguageName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // LanguageCode (string) minLength
            if(this.LanguageCode != null && this.LanguageCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageCode, length must be greater than 1.", new [] { "LanguageCode" });
            }


            // LanguageName (string) minLength
            if(this.LanguageName != null && this.LanguageName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageName, length must be greater than 1.", new [] { "LanguageName" });
            }

            yield break;
        }
    }

}
