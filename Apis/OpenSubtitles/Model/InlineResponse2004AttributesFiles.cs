/*
 * OpenSubtitles API
 *
 * Explore subtitles API here
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@opensubtitles.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenSubtitles.Client.OpenAPIDateConverter;

namespace OpenSubtitles.Model
{
    /// <summary>
    /// InlineResponse2004AttributesFiles
    /// </summary>
    [DataContract]
    public partial class InlineResponse2004AttributesFiles :  IEquatable<InlineResponse2004AttributesFiles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004AttributesFiles" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2004AttributesFiles() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004AttributesFiles" /> class.
        /// </summary>
        /// <param name="fileId">fileId (required).</param>
        /// <param name="cdNumber">cdNumber (required).</param>
        /// <param name="fileName">fileName (required).</param>
        public InlineResponse2004AttributesFiles(decimal fileId = default(decimal), decimal cdNumber = default(decimal), string fileName = default(string))
        {
            // to ensure "fileId" is required (not null)
            if (fileId == null)
            {
                throw new InvalidDataException("fileId is a required property for InlineResponse2004AttributesFiles and cannot be null");
            }
            else
            {
                this.FileId = fileId;
            }

            // to ensure "cdNumber" is required (not null)
            if (cdNumber == null)
            {
                throw new InvalidDataException("cdNumber is a required property for InlineResponse2004AttributesFiles and cannot be null");
            }
            else
            {
                this.CdNumber = cdNumber;
            }

            // to ensure "fileName" is required (not null)
            if (fileName == null)
            {
                throw new InvalidDataException("fileName is a required property for InlineResponse2004AttributesFiles and cannot be null");
            }
            else
            {
                this.FileName = fileName;
            }

        }

        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [DataMember(Name="file_id", EmitDefaultValue=true)]
        public decimal FileId { get; set; }

        /// <summary>
        /// Gets or Sets CdNumber
        /// </summary>
        [DataMember(Name="cd_number", EmitDefaultValue=true)]
        public decimal CdNumber { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="file_name", EmitDefaultValue=true)]
        public string FileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2004AttributesFiles {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  CdNumber: ").Append(CdNumber).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004AttributesFiles);
        }

        /// <summary>
        /// Returns true if InlineResponse2004AttributesFiles instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004AttributesFiles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004AttributesFiles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.CdNumber == input.CdNumber ||
                    (this.CdNumber != null &&
                    this.CdNumber.Equals(input.CdNumber))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileId != null)
                    hashCode = hashCode * 59 + this.FileId.GetHashCode();
                if (this.CdNumber != null)
                    hashCode = hashCode * 59 + this.CdNumber.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // FileName (string) minLength
            if(this.FileName != null && this.FileName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, length must be greater than 1.", new [] { "FileName" });
            }

            yield break;
        }
    }

}
