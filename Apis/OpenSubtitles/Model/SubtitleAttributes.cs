/*
 * OpenSubtitles API
 *
 * Explore subtitles API here
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@opensubtitles.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = OpenSubtitles.Client.OpenAPIDateConverter;

namespace OpenSubtitles.Model
{
    /// <summary>
    /// SubtitleAttributes
    /// </summary>
    [DataContract]
    public partial class SubtitleAttributes :  IEquatable<SubtitleAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitleAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubtitleAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitleAttributes" /> class.
        /// </summary>
        /// <param name="subtitleId">subtitleId (required).</param>
        /// <param name="language">language (required).</param>
        /// <param name="downloadCount">downloadCount (required).</param>
        /// <param name="newDownloadCount">newDownloadCount (required).</param>
        /// <param name="hearingImpaired">hearingImpaired (required).</param>
        /// <param name="hd">hd (required).</param>
        /// <param name="format">format.</param>
        /// <param name="fps">fps (required).</param>
        /// <param name="votes">votes (required).</param>
        /// <param name="points">points (required).</param>
        /// <param name="ratings">ratings (required).</param>
        /// <param name="fromTrusted">fromTrusted (required).</param>
        /// <param name="foreignPartsOnly">foreignPartsOnly (required).</param>
        /// <param name="aiTranslated">aiTranslated (required).</param>
        /// <param name="machineTranslated">machineTranslated.</param>
        /// <param name="uploadDate">uploadDate (required).</param>
        /// <param name="release">release (required).</param>
        /// <param name="comments">comments (required).</param>
        /// <param name="legacySubtitleId">legacySubtitleId (required).</param>
        /// <param name="uploader">uploader (required).</param>
        /// <param name="featureDetails">featureDetails (required).</param>
        /// <param name="url">url (required).</param>
        /// <param name="relatedLinks">relatedLinks (required).</param>
        /// <param name="files">files (required).</param>
        public SubtitleAttributes(string subtitleId = default(string), string language = default(string), decimal downloadCount = default(decimal), decimal newDownloadCount = default(decimal), bool hearingImpaired = default(bool), bool hd = default(bool), string format = default(string), decimal fps = default(decimal), decimal votes = default(decimal), decimal points = default(decimal), decimal ratings = default(decimal), bool fromTrusted = default(bool), bool foreignPartsOnly = default(bool), bool aiTranslated = default(bool), bool machineTranslated = default(bool), string uploadDate = default(string), string release = default(string), string comments = default(string), decimal legacySubtitleId = default(decimal), SubtitleAttributesUploader uploader = default(SubtitleAttributesUploader), SubtitleAttributesFeatureDetails featureDetails = default(SubtitleAttributesFeatureDetails), string url = default(string), List<RelatedLink> relatedLinks = default(List<RelatedLink>), List<InlineResponse2004AttributesFiles> files = default(List<InlineResponse2004AttributesFiles>))
        {
            // to ensure "subtitleId" is required (not null)
            if (subtitleId == null)
            {
                throw new InvalidDataException("subtitleId is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.SubtitleId = subtitleId;
            }

            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new InvalidDataException("language is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.Language = language;
            }

            // to ensure "downloadCount" is required (not null)
            if (downloadCount == null)
            {
                throw new InvalidDataException("downloadCount is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.DownloadCount = downloadCount;
            }

            // to ensure "newDownloadCount" is required (not null)
            if (newDownloadCount == null)
            {
                throw new InvalidDataException("newDownloadCount is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.NewDownloadCount = newDownloadCount;
            }

            // to ensure "hearingImpaired" is required (not null)
            if (hearingImpaired == null)
            {
                throw new InvalidDataException("hearingImpaired is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.HearingImpaired = hearingImpaired;
            }

            // to ensure "hd" is required (not null)
            if (hd == null)
            {
                throw new InvalidDataException("hd is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.Hd = hd;
            }

            // to ensure "fps" is required (not null)
            if (fps == null)
            {
                throw new InvalidDataException("fps is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.Fps = fps;
            }

            // to ensure "votes" is required (not null)
            if (votes == null)
            {
                throw new InvalidDataException("votes is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.Votes = votes;
            }

            // to ensure "points" is required (not null)
            if (points == null)
            {
                throw new InvalidDataException("points is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.Points = points;
            }

            // to ensure "ratings" is required (not null)
            if (ratings == null)
            {
                throw new InvalidDataException("ratings is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.Ratings = ratings;
            }

            // to ensure "fromTrusted" is required (not null)
            if (fromTrusted == null)
            {
                throw new InvalidDataException("fromTrusted is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.FromTrusted = fromTrusted;
            }

            // to ensure "foreignPartsOnly" is required (not null)
            if (foreignPartsOnly == null)
            {
                throw new InvalidDataException("foreignPartsOnly is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.ForeignPartsOnly = foreignPartsOnly;
            }

            // to ensure "aiTranslated" is required (not null)
            if (aiTranslated == null)
            {
                throw new InvalidDataException("aiTranslated is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.AiTranslated = aiTranslated;
            }

            // to ensure "uploadDate" is required (not null)
            if (uploadDate == null)
            {
                throw new InvalidDataException("uploadDate is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.UploadDate = uploadDate;
            }

            // to ensure "release" is required (not null)
            if (release == null)
            {
                throw new InvalidDataException("release is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.Release = release;
            }

            // to ensure "comments" is required (not null)
            if (comments == null)
            {
                throw new InvalidDataException("comments is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.Comments = comments;
            }

            // to ensure "legacySubtitleId" is required (not null)
            if (legacySubtitleId == null)
            {
                throw new InvalidDataException("legacySubtitleId is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.LegacySubtitleId = legacySubtitleId;
            }

            // to ensure "uploader" is required (not null)
            if (uploader == null)
            {
                throw new InvalidDataException("uploader is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.Uploader = uploader;
            }

            // to ensure "featureDetails" is required (not null)
            if (featureDetails == null)
            {
                throw new InvalidDataException("featureDetails is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.FeatureDetails = featureDetails;
            }

            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.Url = url;
            }

            // to ensure "relatedLinks" is required (not null)
            if (relatedLinks == null)
            {
                throw new InvalidDataException("relatedLinks is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.RelatedLinks = relatedLinks;
            }

            // to ensure "files" is required (not null)
            if (files == null)
            {
                throw new InvalidDataException("files is a required property for SubtitleAttributes and cannot be null");
            }
            else
            {
                this.Files = files;
            }

            this.Format = format;
            this.MachineTranslated = machineTranslated;
        }

        /// <summary>
        /// Gets or Sets SubtitleId
        /// </summary>
        [DataMember(Name="subtitle_id", EmitDefaultValue=true)]
        public string SubtitleId { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=true)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets DownloadCount
        /// </summary>
        [DataMember(Name="download_count", EmitDefaultValue=true)]
        public decimal DownloadCount { get; set; }

        /// <summary>
        /// Gets or Sets NewDownloadCount
        /// </summary>
        [DataMember(Name="new_download_count", EmitDefaultValue=true)]
        public decimal NewDownloadCount { get; set; }

        /// <summary>
        /// Gets or Sets HearingImpaired
        /// </summary>
        [DataMember(Name="hearing_impaired", EmitDefaultValue=true)]
        public bool HearingImpaired { get; set; }

        /// <summary>
        /// Gets or Sets Hd
        /// </summary>
        [DataMember(Name="hd", EmitDefaultValue=true)]
        public bool Hd { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets Fps
        /// </summary>
        [DataMember(Name="fps", EmitDefaultValue=true)]
        public decimal Fps { get; set; }

        /// <summary>
        /// Gets or Sets Votes
        /// </summary>
        [DataMember(Name="votes", EmitDefaultValue=true)]
        public decimal Votes { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name="points", EmitDefaultValue=true)]
        public decimal Points { get; set; }

        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [DataMember(Name="ratings", EmitDefaultValue=true)]
        public decimal Ratings { get; set; }

        /// <summary>
        /// Gets or Sets FromTrusted
        /// </summary>
        [DataMember(Name="from_trusted", EmitDefaultValue=true)]
        public bool FromTrusted { get; set; }

        /// <summary>
        /// Gets or Sets ForeignPartsOnly
        /// </summary>
        [DataMember(Name="foreign_parts_only", EmitDefaultValue=true)]
        public bool ForeignPartsOnly { get; set; }

        /// <summary>
        /// Gets or Sets AiTranslated
        /// </summary>
        [DataMember(Name="ai_translated", EmitDefaultValue=true)]
        public bool AiTranslated { get; set; }

        /// <summary>
        /// Gets or Sets MachineTranslated
        /// </summary>
        [DataMember(Name="machine_translated", EmitDefaultValue=false)]
        public bool MachineTranslated { get; set; }

        /// <summary>
        /// Gets or Sets UploadDate
        /// </summary>
        [DataMember(Name="upload_date", EmitDefaultValue=true)]
        public string UploadDate { get; set; }

        /// <summary>
        /// Gets or Sets Release
        /// </summary>
        [DataMember(Name="release", EmitDefaultValue=true)]
        public string Release { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=true)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets LegacySubtitleId
        /// </summary>
        [DataMember(Name="legacy_subtitle_id", EmitDefaultValue=true)]
        public decimal LegacySubtitleId { get; set; }

        /// <summary>
        /// Gets or Sets Uploader
        /// </summary>
        [DataMember(Name="uploader", EmitDefaultValue=true)]
        public SubtitleAttributesUploader Uploader { get; set; }

        /// <summary>
        /// Gets or Sets FeatureDetails
        /// </summary>
        [DataMember(Name="feature_details", EmitDefaultValue=true)]
        public SubtitleAttributesFeatureDetails FeatureDetails { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets RelatedLinks
        /// </summary>
        [DataMember(Name="related_links", EmitDefaultValue=true)]
        [JsonConverter(typeof(SingleOrArrayConverter<RelatedLink>))]
        public List<RelatedLink> RelatedLinks { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=true)]
        public List<InlineResponse2004AttributesFiles> Files { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubtitleAttributes {\n");
            sb.Append("  SubtitleId: ").Append(SubtitleId).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  DownloadCount: ").Append(DownloadCount).Append("\n");
            sb.Append("  NewDownloadCount: ").Append(NewDownloadCount).Append("\n");
            sb.Append("  HearingImpaired: ").Append(HearingImpaired).Append("\n");
            sb.Append("  Hd: ").Append(Hd).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Fps: ").Append(Fps).Append("\n");
            sb.Append("  Votes: ").Append(Votes).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  FromTrusted: ").Append(FromTrusted).Append("\n");
            sb.Append("  ForeignPartsOnly: ").Append(ForeignPartsOnly).Append("\n");
            sb.Append("  AiTranslated: ").Append(AiTranslated).Append("\n");
            sb.Append("  MachineTranslated: ").Append(MachineTranslated).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  LegacySubtitleId: ").Append(LegacySubtitleId).Append("\n");
            sb.Append("  Uploader: ").Append(Uploader).Append("\n");
            sb.Append("  FeatureDetails: ").Append(FeatureDetails).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  RelatedLinks: ").Append(RelatedLinks).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubtitleAttributes);
        }

        /// <summary>
        /// Returns true if SubtitleAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of SubtitleAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubtitleAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubtitleId == input.SubtitleId ||
                    (this.SubtitleId != null &&
                    this.SubtitleId.Equals(input.SubtitleId))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.DownloadCount == input.DownloadCount ||
                    (this.DownloadCount != null &&
                    this.DownloadCount.Equals(input.DownloadCount))
                ) && 
                (
                    this.NewDownloadCount == input.NewDownloadCount ||
                    (this.NewDownloadCount != null &&
                    this.NewDownloadCount.Equals(input.NewDownloadCount))
                ) && 
                (
                    this.HearingImpaired == input.HearingImpaired ||
                    (this.HearingImpaired != null &&
                    this.HearingImpaired.Equals(input.HearingImpaired))
                ) && 
                (
                    this.Hd == input.Hd ||
                    (this.Hd != null &&
                    this.Hd.Equals(input.Hd))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Fps == input.Fps ||
                    (this.Fps != null &&
                    this.Fps.Equals(input.Fps))
                ) && 
                (
                    this.Votes == input.Votes ||
                    (this.Votes != null &&
                    this.Votes.Equals(input.Votes))
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.Ratings == input.Ratings ||
                    (this.Ratings != null &&
                    this.Ratings.Equals(input.Ratings))
                ) && 
                (
                    this.FromTrusted == input.FromTrusted ||
                    (this.FromTrusted != null &&
                    this.FromTrusted.Equals(input.FromTrusted))
                ) && 
                (
                    this.ForeignPartsOnly == input.ForeignPartsOnly ||
                    (this.ForeignPartsOnly != null &&
                    this.ForeignPartsOnly.Equals(input.ForeignPartsOnly))
                ) && 
                (
                    this.AiTranslated == input.AiTranslated ||
                    (this.AiTranslated != null &&
                    this.AiTranslated.Equals(input.AiTranslated))
                ) && 
                (
                    this.MachineTranslated == input.MachineTranslated ||
                    (this.MachineTranslated != null &&
                    this.MachineTranslated.Equals(input.MachineTranslated))
                ) && 
                (
                    this.UploadDate == input.UploadDate ||
                    (this.UploadDate != null &&
                    this.UploadDate.Equals(input.UploadDate))
                ) && 
                (
                    this.Release == input.Release ||
                    (this.Release != null &&
                    this.Release.Equals(input.Release))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.LegacySubtitleId == input.LegacySubtitleId ||
                    (this.LegacySubtitleId != null &&
                    this.LegacySubtitleId.Equals(input.LegacySubtitleId))
                ) && 
                (
                    this.Uploader == input.Uploader ||
                    (this.Uploader != null &&
                    this.Uploader.Equals(input.Uploader))
                ) && 
                (
                    this.FeatureDetails == input.FeatureDetails ||
                    (this.FeatureDetails != null &&
                    this.FeatureDetails.Equals(input.FeatureDetails))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.RelatedLinks == input.RelatedLinks ||
                    this.RelatedLinks != null &&
                    input.RelatedLinks != null &&
                    this.RelatedLinks.SequenceEqual(input.RelatedLinks)
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    input.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubtitleId != null)
                    hashCode = hashCode * 59 + this.SubtitleId.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.DownloadCount != null)
                    hashCode = hashCode * 59 + this.DownloadCount.GetHashCode();
                if (this.NewDownloadCount != null)
                    hashCode = hashCode * 59 + this.NewDownloadCount.GetHashCode();
                if (this.HearingImpaired != null)
                    hashCode = hashCode * 59 + this.HearingImpaired.GetHashCode();
                if (this.Hd != null)
                    hashCode = hashCode * 59 + this.Hd.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Fps != null)
                    hashCode = hashCode * 59 + this.Fps.GetHashCode();
                if (this.Votes != null)
                    hashCode = hashCode * 59 + this.Votes.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.Ratings != null)
                    hashCode = hashCode * 59 + this.Ratings.GetHashCode();
                if (this.FromTrusted != null)
                    hashCode = hashCode * 59 + this.FromTrusted.GetHashCode();
                if (this.ForeignPartsOnly != null)
                    hashCode = hashCode * 59 + this.ForeignPartsOnly.GetHashCode();
                if (this.AiTranslated != null)
                    hashCode = hashCode * 59 + this.AiTranslated.GetHashCode();
                if (this.MachineTranslated != null)
                    hashCode = hashCode * 59 + this.MachineTranslated.GetHashCode();
                if (this.UploadDate != null)
                    hashCode = hashCode * 59 + this.UploadDate.GetHashCode();
                if (this.Release != null)
                    hashCode = hashCode * 59 + this.Release.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.LegacySubtitleId != null)
                    hashCode = hashCode * 59 + this.LegacySubtitleId.GetHashCode();
                if (this.Uploader != null)
                    hashCode = hashCode * 59 + this.Uploader.GetHashCode();
                if (this.FeatureDetails != null)
                    hashCode = hashCode * 59 + this.FeatureDetails.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.RelatedLinks != null)
                    hashCode = hashCode * 59 + this.RelatedLinks.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // SubtitleId (string) minLength
            if(this.SubtitleId != null && this.SubtitleId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubtitleId, length must be greater than 1.", new [] { "SubtitleId" });
            }


            // Language (string) minLength
            if(this.Language != null && this.Language.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Language, length must be greater than 1.", new [] { "Language" });
            }


            // UploadDate (string) minLength
            if(this.UploadDate != null && this.UploadDate.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UploadDate, length must be greater than 1.", new [] { "UploadDate" });
            }


            // Release (string) minLength
            if(this.Release != null && this.Release.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Release, length must be greater than 1.", new [] { "Release" });
            }


            // Url (string) minLength
            if(this.Url != null && this.Url.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be greater than 1.", new [] { "Url" });
            }



            yield break;
        }
    }
    
    class SingleOrArrayConverter<T> : JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            return (objectType == typeof(List<T>));
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            JToken token = JToken.Load(reader);
            if (token.Type == JTokenType.Array)
            {
                return token.ToObject<List<T>>();
            }
            return new List<T> { token.ToObject<T>() };
        }

        public override bool CanWrite
        {
            get { return false; }
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new NotImplementedException();
        }
    }
}
