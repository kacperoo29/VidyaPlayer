/*
 * OpenSubtitles API
 *
 * Explore subtitles API here
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@opensubtitles.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenSubtitles.Client.OpenAPIDateConverter;

namespace OpenSubtitles.Model
{
    /// <summary>
    /// InlineResponse2004AttributesRelatedLinks
    /// </summary>
    [DataContract]
    public partial class InlineResponse2004AttributesRelatedLinks :  IEquatable<InlineResponse2004AttributesRelatedLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004AttributesRelatedLinks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2004AttributesRelatedLinks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004AttributesRelatedLinks" /> class.
        /// </summary>
        /// <param name="label">label (required).</param>
        /// <param name="url">url (required).</param>
        /// <param name="imgUrl">imgUrl (required).</param>
        public InlineResponse2004AttributesRelatedLinks(string label = default(string), string url = default(string), string imgUrl = default(string))
        {
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new InvalidDataException("label is a required property for InlineResponse2004AttributesRelatedLinks and cannot be null");
            }
            else
            {
                this.Label = label;
            }

            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for InlineResponse2004AttributesRelatedLinks and cannot be null");
            }
            else
            {
                this.Url = url;
            }

            // to ensure "imgUrl" is required (not null)
            if (imgUrl == null)
            {
                throw new InvalidDataException("imgUrl is a required property for InlineResponse2004AttributesRelatedLinks and cannot be null");
            }
            else
            {
                this.ImgUrl = imgUrl;
            }

        }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=true)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets ImgUrl
        /// </summary>
        [DataMember(Name="img_url", EmitDefaultValue=true)]
        public string ImgUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2004AttributesRelatedLinks {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ImgUrl: ").Append(ImgUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004AttributesRelatedLinks);
        }

        /// <summary>
        /// Returns true if InlineResponse2004AttributesRelatedLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004AttributesRelatedLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004AttributesRelatedLinks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ImgUrl == input.ImgUrl ||
                    (this.ImgUrl != null &&
                    this.ImgUrl.Equals(input.ImgUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.ImgUrl != null)
                    hashCode = hashCode * 59 + this.ImgUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // Label (string) minLength
            if(this.Label != null && this.Label.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be greater than 1.", new [] { "Label" });
            }


            // Url (string) minLength
            if(this.Url != null && this.Url.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be greater than 1.", new [] { "Url" });
            }


            // ImgUrl (string) minLength
            if(this.ImgUrl != null && this.ImgUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImgUrl, length must be greater than 1.", new [] { "ImgUrl" });
            }

            yield break;
        }
    }

}
