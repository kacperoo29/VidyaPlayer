/*
 * OpenSubtitles API
 *
 * Explore subtitles API here
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@opensubtitles.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenSubtitles.Client.OpenAPIDateConverter;

namespace OpenSubtitles.Model
{
    /// <summary>
    /// FeatureMovieAttributesSubtitlesCounts
    /// </summary>
    [DataContract]
    public partial class FeatureMovieAttributesSubtitlesCounts :  IEquatable<FeatureMovieAttributesSubtitlesCounts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureMovieAttributesSubtitlesCounts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeatureMovieAttributesSubtitlesCounts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureMovieAttributesSubtitlesCounts" /> class.
        /// </summary>
        /// <param name="en">en (required).</param>
        /// <param name="ptPT">ptPT (required).</param>
        /// <param name="fi">fi (required).</param>
        /// <param name="ptBR">ptBR (required).</param>
        /// <param name="es">es (required).</param>
        /// <param name="ar">ar (required).</param>
        /// <param name="pl">pl (required).</param>
        /// <param name="sr">sr (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="ro">ro (required).</param>
        /// <param name="zhCN">zhCN (required).</param>
        /// <param name="nl">nl (required).</param>
        /// <param name="el">el (required).</param>
        /// <param name="hu">hu (required).</param>
        /// <param name="fr">fr (required).</param>
        /// <param name="sl">sl (required).</param>
        /// <param name="tr">tr (required).</param>
        /// <param name="et">et (required).</param>
        /// <param name="bg">bg (required).</param>
        /// <param name="cs">cs (required).</param>
        /// <param name="de">de (required).</param>
        /// <param name="he">he (required).</param>
        /// <param name="it">it (required).</param>
        /// <param name="vi">vi (required).</param>
        /// <param name="hr">hr (required).</param>
        /// <param name="ko">ko (required).</param>
        /// <param name="no">no (required).</param>
        /// <param name="sv">sv (required).</param>
        /// <param name="ta">ta (required).</param>
        /// <param name="eu">eu (required).</param>
        /// <param name="da">da (required).</param>
        /// <param name="fa">fa (required).</param>
        /// <param name="sk">sk (required).</param>
        /// <param name="uk">uk (required).</param>
        /// <param name="zhTW">zhTW (required).</param>
        /// <param name="bn">bn (required).</param>
        /// <param name="ka">ka (required).</param>
        /// <param name="ja">ja (required).</param>
        /// <param name="lt">lt (required).</param>
        /// <param name="mk">mk (required).</param>
        /// <param name="ml">ml (required).</param>
        /// <param name="ms">ms (required).</param>
        /// <param name="ru">ru (required).</param>
        /// <param name="ze">ze (required).</param>
        public FeatureMovieAttributesSubtitlesCounts(decimal en = default(decimal), decimal ptPT = default(decimal), decimal fi = default(decimal), decimal ptBR = default(decimal), decimal es = default(decimal), decimal ar = default(decimal), decimal pl = default(decimal), decimal sr = default(decimal), decimal id = default(decimal), decimal ro = default(decimal), decimal zhCN = default(decimal), decimal nl = default(decimal), decimal el = default(decimal), decimal hu = default(decimal), decimal fr = default(decimal), decimal sl = default(decimal), decimal tr = default(decimal), decimal et = default(decimal), decimal bg = default(decimal), decimal cs = default(decimal), decimal de = default(decimal), decimal he = default(decimal), decimal it = default(decimal), decimal vi = default(decimal), decimal hr = default(decimal), decimal ko = default(decimal), decimal no = default(decimal), decimal sv = default(decimal), decimal ta = default(decimal), decimal eu = default(decimal), decimal da = default(decimal), decimal fa = default(decimal), decimal sk = default(decimal), decimal uk = default(decimal), decimal zhTW = default(decimal), decimal bn = default(decimal), decimal ka = default(decimal), decimal ja = default(decimal), decimal lt = default(decimal), decimal mk = default(decimal), decimal ml = default(decimal), decimal ms = default(decimal), decimal ru = default(decimal), decimal ze = default(decimal))
        {
            // to ensure "en" is required (not null)
            if (en == null)
            {
                throw new InvalidDataException("en is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.En = en;
            }

            // to ensure "ptPT" is required (not null)
            if (ptPT == null)
            {
                throw new InvalidDataException("ptPT is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.PtPT = ptPT;
            }

            // to ensure "fi" is required (not null)
            if (fi == null)
            {
                throw new InvalidDataException("fi is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Fi = fi;
            }

            // to ensure "ptBR" is required (not null)
            if (ptBR == null)
            {
                throw new InvalidDataException("ptBR is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.PtBR = ptBR;
            }

            // to ensure "es" is required (not null)
            if (es == null)
            {
                throw new InvalidDataException("es is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Es = es;
            }

            // to ensure "ar" is required (not null)
            if (ar == null)
            {
                throw new InvalidDataException("ar is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Ar = ar;
            }

            // to ensure "pl" is required (not null)
            if (pl == null)
            {
                throw new InvalidDataException("pl is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Pl = pl;
            }

            // to ensure "sr" is required (not null)
            if (sr == null)
            {
                throw new InvalidDataException("sr is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Sr = sr;
            }

            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "ro" is required (not null)
            if (ro == null)
            {
                throw new InvalidDataException("ro is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Ro = ro;
            }

            // to ensure "zhCN" is required (not null)
            if (zhCN == null)
            {
                throw new InvalidDataException("zhCN is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.ZhCN = zhCN;
            }

            // to ensure "nl" is required (not null)
            if (nl == null)
            {
                throw new InvalidDataException("nl is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Nl = nl;
            }

            // to ensure "el" is required (not null)
            if (el == null)
            {
                throw new InvalidDataException("el is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.El = el;
            }

            // to ensure "hu" is required (not null)
            if (hu == null)
            {
                throw new InvalidDataException("hu is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Hu = hu;
            }

            // to ensure "fr" is required (not null)
            if (fr == null)
            {
                throw new InvalidDataException("fr is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Fr = fr;
            }

            // to ensure "sl" is required (not null)
            if (sl == null)
            {
                throw new InvalidDataException("sl is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Sl = sl;
            }

            // to ensure "tr" is required (not null)
            if (tr == null)
            {
                throw new InvalidDataException("tr is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Tr = tr;
            }

            // to ensure "et" is required (not null)
            if (et == null)
            {
                throw new InvalidDataException("et is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Et = et;
            }

            // to ensure "bg" is required (not null)
            if (bg == null)
            {
                throw new InvalidDataException("bg is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Bg = bg;
            }

            // to ensure "cs" is required (not null)
            if (cs == null)
            {
                throw new InvalidDataException("cs is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Cs = cs;
            }

            // to ensure "de" is required (not null)
            if (de == null)
            {
                throw new InvalidDataException("de is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.De = de;
            }

            // to ensure "he" is required (not null)
            if (he == null)
            {
                throw new InvalidDataException("he is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.He = he;
            }

            // to ensure "it" is required (not null)
            if (it == null)
            {
                throw new InvalidDataException("it is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.It = it;
            }

            // to ensure "vi" is required (not null)
            if (vi == null)
            {
                throw new InvalidDataException("vi is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Vi = vi;
            }

            // to ensure "hr" is required (not null)
            if (hr == null)
            {
                throw new InvalidDataException("hr is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Hr = hr;
            }

            // to ensure "ko" is required (not null)
            if (ko == null)
            {
                throw new InvalidDataException("ko is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Ko = ko;
            }

            // to ensure "no" is required (not null)
            if (no == null)
            {
                throw new InvalidDataException("no is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.No = no;
            }

            // to ensure "sv" is required (not null)
            if (sv == null)
            {
                throw new InvalidDataException("sv is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Sv = sv;
            }

            // to ensure "ta" is required (not null)
            if (ta == null)
            {
                throw new InvalidDataException("ta is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Ta = ta;
            }

            // to ensure "eu" is required (not null)
            if (eu == null)
            {
                throw new InvalidDataException("eu is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Eu = eu;
            }

            // to ensure "da" is required (not null)
            if (da == null)
            {
                throw new InvalidDataException("da is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Da = da;
            }

            // to ensure "fa" is required (not null)
            if (fa == null)
            {
                throw new InvalidDataException("fa is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Fa = fa;
            }

            // to ensure "sk" is required (not null)
            if (sk == null)
            {
                throw new InvalidDataException("sk is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Sk = sk;
            }

            // to ensure "uk" is required (not null)
            if (uk == null)
            {
                throw new InvalidDataException("uk is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Uk = uk;
            }

            // to ensure "zhTW" is required (not null)
            if (zhTW == null)
            {
                throw new InvalidDataException("zhTW is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.ZhTW = zhTW;
            }

            // to ensure "bn" is required (not null)
            if (bn == null)
            {
                throw new InvalidDataException("bn is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Bn = bn;
            }

            // to ensure "ka" is required (not null)
            if (ka == null)
            {
                throw new InvalidDataException("ka is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Ka = ka;
            }

            // to ensure "ja" is required (not null)
            if (ja == null)
            {
                throw new InvalidDataException("ja is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Ja = ja;
            }

            // to ensure "lt" is required (not null)
            if (lt == null)
            {
                throw new InvalidDataException("lt is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Lt = lt;
            }

            // to ensure "mk" is required (not null)
            if (mk == null)
            {
                throw new InvalidDataException("mk is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Mk = mk;
            }

            // to ensure "ml" is required (not null)
            if (ml == null)
            {
                throw new InvalidDataException("ml is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Ml = ml;
            }

            // to ensure "ms" is required (not null)
            if (ms == null)
            {
                throw new InvalidDataException("ms is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Ms = ms;
            }

            // to ensure "ru" is required (not null)
            if (ru == null)
            {
                throw new InvalidDataException("ru is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Ru = ru;
            }

            // to ensure "ze" is required (not null)
            if (ze == null)
            {
                throw new InvalidDataException("ze is a required property for FeatureMovieAttributesSubtitlesCounts and cannot be null");
            }
            else
            {
                this.Ze = ze;
            }

        }

        /// <summary>
        /// Gets or Sets En
        /// </summary>
        [DataMember(Name="en", EmitDefaultValue=true)]
        public decimal En { get; set; }

        /// <summary>
        /// Gets or Sets PtPT
        /// </summary>
        [DataMember(Name="pt-PT", EmitDefaultValue=true)]
        public decimal PtPT { get; set; }

        /// <summary>
        /// Gets or Sets Fi
        /// </summary>
        [DataMember(Name="fi", EmitDefaultValue=true)]
        public decimal Fi { get; set; }

        /// <summary>
        /// Gets or Sets PtBR
        /// </summary>
        [DataMember(Name="pt-BR", EmitDefaultValue=true)]
        public decimal PtBR { get; set; }

        /// <summary>
        /// Gets or Sets Es
        /// </summary>
        [DataMember(Name="es", EmitDefaultValue=true)]
        public decimal Es { get; set; }

        /// <summary>
        /// Gets or Sets Ar
        /// </summary>
        [DataMember(Name="ar", EmitDefaultValue=true)]
        public decimal Ar { get; set; }

        /// <summary>
        /// Gets or Sets Pl
        /// </summary>
        [DataMember(Name="pl", EmitDefaultValue=true)]
        public decimal Pl { get; set; }

        /// <summary>
        /// Gets or Sets Sr
        /// </summary>
        [DataMember(Name="sr", EmitDefaultValue=true)]
        public decimal Sr { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public decimal Id { get; set; }

        /// <summary>
        /// Gets or Sets Ro
        /// </summary>
        [DataMember(Name="ro", EmitDefaultValue=true)]
        public decimal Ro { get; set; }

        /// <summary>
        /// Gets or Sets ZhCN
        /// </summary>
        [DataMember(Name="zh-CN", EmitDefaultValue=true)]
        public decimal ZhCN { get; set; }

        /// <summary>
        /// Gets or Sets Nl
        /// </summary>
        [DataMember(Name="nl", EmitDefaultValue=true)]
        public decimal Nl { get; set; }

        /// <summary>
        /// Gets or Sets El
        /// </summary>
        [DataMember(Name="el", EmitDefaultValue=true)]
        public decimal El { get; set; }

        /// <summary>
        /// Gets or Sets Hu
        /// </summary>
        [DataMember(Name="hu", EmitDefaultValue=true)]
        public decimal Hu { get; set; }

        /// <summary>
        /// Gets or Sets Fr
        /// </summary>
        [DataMember(Name="fr", EmitDefaultValue=true)]
        public decimal Fr { get; set; }

        /// <summary>
        /// Gets or Sets Sl
        /// </summary>
        [DataMember(Name="sl", EmitDefaultValue=true)]
        public decimal Sl { get; set; }

        /// <summary>
        /// Gets or Sets Tr
        /// </summary>
        [DataMember(Name="tr", EmitDefaultValue=true)]
        public decimal Tr { get; set; }

        /// <summary>
        /// Gets or Sets Et
        /// </summary>
        [DataMember(Name="et", EmitDefaultValue=true)]
        public decimal Et { get; set; }

        /// <summary>
        /// Gets or Sets Bg
        /// </summary>
        [DataMember(Name="bg", EmitDefaultValue=true)]
        public decimal Bg { get; set; }

        /// <summary>
        /// Gets or Sets Cs
        /// </summary>
        [DataMember(Name="cs", EmitDefaultValue=true)]
        public decimal Cs { get; set; }

        /// <summary>
        /// Gets or Sets De
        /// </summary>
        [DataMember(Name="de", EmitDefaultValue=true)]
        public decimal De { get; set; }

        /// <summary>
        /// Gets or Sets He
        /// </summary>
        [DataMember(Name="he", EmitDefaultValue=true)]
        public decimal He { get; set; }

        /// <summary>
        /// Gets or Sets It
        /// </summary>
        [DataMember(Name="it", EmitDefaultValue=true)]
        public decimal It { get; set; }

        /// <summary>
        /// Gets or Sets Vi
        /// </summary>
        [DataMember(Name="vi", EmitDefaultValue=true)]
        public decimal Vi { get; set; }

        /// <summary>
        /// Gets or Sets Hr
        /// </summary>
        [DataMember(Name="hr", EmitDefaultValue=true)]
        public decimal Hr { get; set; }

        /// <summary>
        /// Gets or Sets Ko
        /// </summary>
        [DataMember(Name="ko", EmitDefaultValue=true)]
        public decimal Ko { get; set; }

        /// <summary>
        /// Gets or Sets No
        /// </summary>
        [DataMember(Name="no", EmitDefaultValue=true)]
        public decimal No { get; set; }

        /// <summary>
        /// Gets or Sets Sv
        /// </summary>
        [DataMember(Name="sv", EmitDefaultValue=true)]
        public decimal Sv { get; set; }

        /// <summary>
        /// Gets or Sets Ta
        /// </summary>
        [DataMember(Name="ta", EmitDefaultValue=true)]
        public decimal Ta { get; set; }

        /// <summary>
        /// Gets or Sets Eu
        /// </summary>
        [DataMember(Name="eu", EmitDefaultValue=true)]
        public decimal Eu { get; set; }

        /// <summary>
        /// Gets or Sets Da
        /// </summary>
        [DataMember(Name="da", EmitDefaultValue=true)]
        public decimal Da { get; set; }

        /// <summary>
        /// Gets or Sets Fa
        /// </summary>
        [DataMember(Name="fa", EmitDefaultValue=true)]
        public decimal Fa { get; set; }

        /// <summary>
        /// Gets or Sets Sk
        /// </summary>
        [DataMember(Name="sk", EmitDefaultValue=true)]
        public decimal Sk { get; set; }

        /// <summary>
        /// Gets or Sets Uk
        /// </summary>
        [DataMember(Name="uk", EmitDefaultValue=true)]
        public decimal Uk { get; set; }

        /// <summary>
        /// Gets or Sets ZhTW
        /// </summary>
        [DataMember(Name="zh-TW", EmitDefaultValue=true)]
        public decimal ZhTW { get; set; }

        /// <summary>
        /// Gets or Sets Bn
        /// </summary>
        [DataMember(Name="bn", EmitDefaultValue=true)]
        public decimal Bn { get; set; }

        /// <summary>
        /// Gets or Sets Ka
        /// </summary>
        [DataMember(Name="ka", EmitDefaultValue=true)]
        public decimal Ka { get; set; }

        /// <summary>
        /// Gets or Sets Ja
        /// </summary>
        [DataMember(Name="ja", EmitDefaultValue=true)]
        public decimal Ja { get; set; }

        /// <summary>
        /// Gets or Sets Lt
        /// </summary>
        [DataMember(Name="lt", EmitDefaultValue=true)]
        public decimal Lt { get; set; }

        /// <summary>
        /// Gets or Sets Mk
        /// </summary>
        [DataMember(Name="mk", EmitDefaultValue=true)]
        public decimal Mk { get; set; }

        /// <summary>
        /// Gets or Sets Ml
        /// </summary>
        [DataMember(Name="ml", EmitDefaultValue=true)]
        public decimal Ml { get; set; }

        /// <summary>
        /// Gets or Sets Ms
        /// </summary>
        [DataMember(Name="ms", EmitDefaultValue=true)]
        public decimal Ms { get; set; }

        /// <summary>
        /// Gets or Sets Ru
        /// </summary>
        [DataMember(Name="ru", EmitDefaultValue=true)]
        public decimal Ru { get; set; }

        /// <summary>
        /// Gets or Sets Ze
        /// </summary>
        [DataMember(Name="ze", EmitDefaultValue=true)]
        public decimal Ze { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureMovieAttributesSubtitlesCounts {\n");
            sb.Append("  En: ").Append(En).Append("\n");
            sb.Append("  PtPT: ").Append(PtPT).Append("\n");
            sb.Append("  Fi: ").Append(Fi).Append("\n");
            sb.Append("  PtBR: ").Append(PtBR).Append("\n");
            sb.Append("  Es: ").Append(Es).Append("\n");
            sb.Append("  Ar: ").Append(Ar).Append("\n");
            sb.Append("  Pl: ").Append(Pl).Append("\n");
            sb.Append("  Sr: ").Append(Sr).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ro: ").Append(Ro).Append("\n");
            sb.Append("  ZhCN: ").Append(ZhCN).Append("\n");
            sb.Append("  Nl: ").Append(Nl).Append("\n");
            sb.Append("  El: ").Append(El).Append("\n");
            sb.Append("  Hu: ").Append(Hu).Append("\n");
            sb.Append("  Fr: ").Append(Fr).Append("\n");
            sb.Append("  Sl: ").Append(Sl).Append("\n");
            sb.Append("  Tr: ").Append(Tr).Append("\n");
            sb.Append("  Et: ").Append(Et).Append("\n");
            sb.Append("  Bg: ").Append(Bg).Append("\n");
            sb.Append("  Cs: ").Append(Cs).Append("\n");
            sb.Append("  De: ").Append(De).Append("\n");
            sb.Append("  He: ").Append(He).Append("\n");
            sb.Append("  It: ").Append(It).Append("\n");
            sb.Append("  Vi: ").Append(Vi).Append("\n");
            sb.Append("  Hr: ").Append(Hr).Append("\n");
            sb.Append("  Ko: ").Append(Ko).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  Sv: ").Append(Sv).Append("\n");
            sb.Append("  Ta: ").Append(Ta).Append("\n");
            sb.Append("  Eu: ").Append(Eu).Append("\n");
            sb.Append("  Da: ").Append(Da).Append("\n");
            sb.Append("  Fa: ").Append(Fa).Append("\n");
            sb.Append("  Sk: ").Append(Sk).Append("\n");
            sb.Append("  Uk: ").Append(Uk).Append("\n");
            sb.Append("  ZhTW: ").Append(ZhTW).Append("\n");
            sb.Append("  Bn: ").Append(Bn).Append("\n");
            sb.Append("  Ka: ").Append(Ka).Append("\n");
            sb.Append("  Ja: ").Append(Ja).Append("\n");
            sb.Append("  Lt: ").Append(Lt).Append("\n");
            sb.Append("  Mk: ").Append(Mk).Append("\n");
            sb.Append("  Ml: ").Append(Ml).Append("\n");
            sb.Append("  Ms: ").Append(Ms).Append("\n");
            sb.Append("  Ru: ").Append(Ru).Append("\n");
            sb.Append("  Ze: ").Append(Ze).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureMovieAttributesSubtitlesCounts);
        }

        /// <summary>
        /// Returns true if FeatureMovieAttributesSubtitlesCounts instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureMovieAttributesSubtitlesCounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureMovieAttributesSubtitlesCounts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.En == input.En ||
                    (this.En != null &&
                    this.En.Equals(input.En))
                ) && 
                (
                    this.PtPT == input.PtPT ||
                    (this.PtPT != null &&
                    this.PtPT.Equals(input.PtPT))
                ) && 
                (
                    this.Fi == input.Fi ||
                    (this.Fi != null &&
                    this.Fi.Equals(input.Fi))
                ) && 
                (
                    this.PtBR == input.PtBR ||
                    (this.PtBR != null &&
                    this.PtBR.Equals(input.PtBR))
                ) && 
                (
                    this.Es == input.Es ||
                    (this.Es != null &&
                    this.Es.Equals(input.Es))
                ) && 
                (
                    this.Ar == input.Ar ||
                    (this.Ar != null &&
                    this.Ar.Equals(input.Ar))
                ) && 
                (
                    this.Pl == input.Pl ||
                    (this.Pl != null &&
                    this.Pl.Equals(input.Pl))
                ) && 
                (
                    this.Sr == input.Sr ||
                    (this.Sr != null &&
                    this.Sr.Equals(input.Sr))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Ro == input.Ro ||
                    (this.Ro != null &&
                    this.Ro.Equals(input.Ro))
                ) && 
                (
                    this.ZhCN == input.ZhCN ||
                    (this.ZhCN != null &&
                    this.ZhCN.Equals(input.ZhCN))
                ) && 
                (
                    this.Nl == input.Nl ||
                    (this.Nl != null &&
                    this.Nl.Equals(input.Nl))
                ) && 
                (
                    this.El == input.El ||
                    (this.El != null &&
                    this.El.Equals(input.El))
                ) && 
                (
                    this.Hu == input.Hu ||
                    (this.Hu != null &&
                    this.Hu.Equals(input.Hu))
                ) && 
                (
                    this.Fr == input.Fr ||
                    (this.Fr != null &&
                    this.Fr.Equals(input.Fr))
                ) && 
                (
                    this.Sl == input.Sl ||
                    (this.Sl != null &&
                    this.Sl.Equals(input.Sl))
                ) && 
                (
                    this.Tr == input.Tr ||
                    (this.Tr != null &&
                    this.Tr.Equals(input.Tr))
                ) && 
                (
                    this.Et == input.Et ||
                    (this.Et != null &&
                    this.Et.Equals(input.Et))
                ) && 
                (
                    this.Bg == input.Bg ||
                    (this.Bg != null &&
                    this.Bg.Equals(input.Bg))
                ) && 
                (
                    this.Cs == input.Cs ||
                    (this.Cs != null &&
                    this.Cs.Equals(input.Cs))
                ) && 
                (
                    this.De == input.De ||
                    (this.De != null &&
                    this.De.Equals(input.De))
                ) && 
                (
                    this.He == input.He ||
                    (this.He != null &&
                    this.He.Equals(input.He))
                ) && 
                (
                    this.It == input.It ||
                    (this.It != null &&
                    this.It.Equals(input.It))
                ) && 
                (
                    this.Vi == input.Vi ||
                    (this.Vi != null &&
                    this.Vi.Equals(input.Vi))
                ) && 
                (
                    this.Hr == input.Hr ||
                    (this.Hr != null &&
                    this.Hr.Equals(input.Hr))
                ) && 
                (
                    this.Ko == input.Ko ||
                    (this.Ko != null &&
                    this.Ko.Equals(input.Ko))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.Sv == input.Sv ||
                    (this.Sv != null &&
                    this.Sv.Equals(input.Sv))
                ) && 
                (
                    this.Ta == input.Ta ||
                    (this.Ta != null &&
                    this.Ta.Equals(input.Ta))
                ) && 
                (
                    this.Eu == input.Eu ||
                    (this.Eu != null &&
                    this.Eu.Equals(input.Eu))
                ) && 
                (
                    this.Da == input.Da ||
                    (this.Da != null &&
                    this.Da.Equals(input.Da))
                ) && 
                (
                    this.Fa == input.Fa ||
                    (this.Fa != null &&
                    this.Fa.Equals(input.Fa))
                ) && 
                (
                    this.Sk == input.Sk ||
                    (this.Sk != null &&
                    this.Sk.Equals(input.Sk))
                ) && 
                (
                    this.Uk == input.Uk ||
                    (this.Uk != null &&
                    this.Uk.Equals(input.Uk))
                ) && 
                (
                    this.ZhTW == input.ZhTW ||
                    (this.ZhTW != null &&
                    this.ZhTW.Equals(input.ZhTW))
                ) && 
                (
                    this.Bn == input.Bn ||
                    (this.Bn != null &&
                    this.Bn.Equals(input.Bn))
                ) && 
                (
                    this.Ka == input.Ka ||
                    (this.Ka != null &&
                    this.Ka.Equals(input.Ka))
                ) && 
                (
                    this.Ja == input.Ja ||
                    (this.Ja != null &&
                    this.Ja.Equals(input.Ja))
                ) && 
                (
                    this.Lt == input.Lt ||
                    (this.Lt != null &&
                    this.Lt.Equals(input.Lt))
                ) && 
                (
                    this.Mk == input.Mk ||
                    (this.Mk != null &&
                    this.Mk.Equals(input.Mk))
                ) && 
                (
                    this.Ml == input.Ml ||
                    (this.Ml != null &&
                    this.Ml.Equals(input.Ml))
                ) && 
                (
                    this.Ms == input.Ms ||
                    (this.Ms != null &&
                    this.Ms.Equals(input.Ms))
                ) && 
                (
                    this.Ru == input.Ru ||
                    (this.Ru != null &&
                    this.Ru.Equals(input.Ru))
                ) && 
                (
                    this.Ze == input.Ze ||
                    (this.Ze != null &&
                    this.Ze.Equals(input.Ze))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.En != null)
                    hashCode = hashCode * 59 + this.En.GetHashCode();
                if (this.PtPT != null)
                    hashCode = hashCode * 59 + this.PtPT.GetHashCode();
                if (this.Fi != null)
                    hashCode = hashCode * 59 + this.Fi.GetHashCode();
                if (this.PtBR != null)
                    hashCode = hashCode * 59 + this.PtBR.GetHashCode();
                if (this.Es != null)
                    hashCode = hashCode * 59 + this.Es.GetHashCode();
                if (this.Ar != null)
                    hashCode = hashCode * 59 + this.Ar.GetHashCode();
                if (this.Pl != null)
                    hashCode = hashCode * 59 + this.Pl.GetHashCode();
                if (this.Sr != null)
                    hashCode = hashCode * 59 + this.Sr.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Ro != null)
                    hashCode = hashCode * 59 + this.Ro.GetHashCode();
                if (this.ZhCN != null)
                    hashCode = hashCode * 59 + this.ZhCN.GetHashCode();
                if (this.Nl != null)
                    hashCode = hashCode * 59 + this.Nl.GetHashCode();
                if (this.El != null)
                    hashCode = hashCode * 59 + this.El.GetHashCode();
                if (this.Hu != null)
                    hashCode = hashCode * 59 + this.Hu.GetHashCode();
                if (this.Fr != null)
                    hashCode = hashCode * 59 + this.Fr.GetHashCode();
                if (this.Sl != null)
                    hashCode = hashCode * 59 + this.Sl.GetHashCode();
                if (this.Tr != null)
                    hashCode = hashCode * 59 + this.Tr.GetHashCode();
                if (this.Et != null)
                    hashCode = hashCode * 59 + this.Et.GetHashCode();
                if (this.Bg != null)
                    hashCode = hashCode * 59 + this.Bg.GetHashCode();
                if (this.Cs != null)
                    hashCode = hashCode * 59 + this.Cs.GetHashCode();
                if (this.De != null)
                    hashCode = hashCode * 59 + this.De.GetHashCode();
                if (this.He != null)
                    hashCode = hashCode * 59 + this.He.GetHashCode();
                if (this.It != null)
                    hashCode = hashCode * 59 + this.It.GetHashCode();
                if (this.Vi != null)
                    hashCode = hashCode * 59 + this.Vi.GetHashCode();
                if (this.Hr != null)
                    hashCode = hashCode * 59 + this.Hr.GetHashCode();
                if (this.Ko != null)
                    hashCode = hashCode * 59 + this.Ko.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.Sv != null)
                    hashCode = hashCode * 59 + this.Sv.GetHashCode();
                if (this.Ta != null)
                    hashCode = hashCode * 59 + this.Ta.GetHashCode();
                if (this.Eu != null)
                    hashCode = hashCode * 59 + this.Eu.GetHashCode();
                if (this.Da != null)
                    hashCode = hashCode * 59 + this.Da.GetHashCode();
                if (this.Fa != null)
                    hashCode = hashCode * 59 + this.Fa.GetHashCode();
                if (this.Sk != null)
                    hashCode = hashCode * 59 + this.Sk.GetHashCode();
                if (this.Uk != null)
                    hashCode = hashCode * 59 + this.Uk.GetHashCode();
                if (this.ZhTW != null)
                    hashCode = hashCode * 59 + this.ZhTW.GetHashCode();
                if (this.Bn != null)
                    hashCode = hashCode * 59 + this.Bn.GetHashCode();
                if (this.Ka != null)
                    hashCode = hashCode * 59 + this.Ka.GetHashCode();
                if (this.Ja != null)
                    hashCode = hashCode * 59 + this.Ja.GetHashCode();
                if (this.Lt != null)
                    hashCode = hashCode * 59 + this.Lt.GetHashCode();
                if (this.Mk != null)
                    hashCode = hashCode * 59 + this.Mk.GetHashCode();
                if (this.Ml != null)
                    hashCode = hashCode * 59 + this.Ml.GetHashCode();
                if (this.Ms != null)
                    hashCode = hashCode * 59 + this.Ms.GetHashCode();
                if (this.Ru != null)
                    hashCode = hashCode * 59 + this.Ru.GetHashCode();
                if (this.Ze != null)
                    hashCode = hashCode * 59 + this.Ze.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
